// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/analizadores/Lexico

package analizadores;
import java_cup.runtime.Symbol;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\2\4\22\0\1\5\1\0"+
    "\1\6\1\7\1\10\2\0\1\6\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\12\21\1\22\1\23"+
    "\1\0\1\24\3\0\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\37\1\45\1\46\1\47\1\50"+
    "\1\51\1\37\1\52\1\53\1\37\1\54\1\0\1\55"+
    "\3\0\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\37\1\45\1\46\1\47\1\50\1\51\1\37"+
    "\1\52\1\53\1\37\1\56\1\57\1\60\7\0\1\3"+
    "\252\0\2\61\115\0\1\62\u0198\0\1\63\3\0\1\64"+
    "\1\65\12\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\11\21\1\22\1\23\1\24\1\25\1\1"+
    "\1\26\1\0\1\27\1\30\2\0\11\21\1\0\1\21"+
    "\2\0\1\31\11\21\1\0\1\21\1\0\1\32\3\21"+
    "\1\0\1\21\1\33\3\21\1\0\1\21\1\0\2\21"+
    "\1\0\2\21\1\0\3\21\1\0\1\21\1\0\1\21"+
    "\1\0\2\21\1\0\2\21\1\0\1\34\2\21\1\0"+
    "\2\35\2\36\1\21\2\37\1\40\1\21\1\0\2\21"+
    "\1\0\1\41\1\42\1\41\1\42\2\43\1\21\1\0"+
    "\4\21\3\0\1\21\1\0\3\21\1\0\1\21\2\0"+
    "\1\21\1\0\3\21\1\0\2\44\1\0\1\21\1\0"+
    "\3\21\2\0\1\21\1\0\3\21\2\0\1\21\1\0"+
    "\1\21\2\45\2\46\1\21\1\0\1\21\2\47\2\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\2\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\66\0\66\0\66"+
    "\0\66\0\66\0\66\0\66\0\66\0\66\0\u010e\0\66"+
    "\0\66\0\66\0\u0144\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252"+
    "\0\u0288\0\u02be\0\u02f4\0\66\0\66\0\66\0\66\0\u032a"+
    "\0\66\0\242\0\66\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438"+
    "\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8"+
    "\0\u061e\0\u0654\0\u068a\0\u03cc\0\u06c0\0\u06f6\0\u072c\0\u0762"+
    "\0\u0798\0\u07ce\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912"+
    "\0\u0396\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u017a\0\u0a56"+
    "\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06"+
    "\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6"+
    "\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66"+
    "\0\u0f9c\0\u017a\0\u0fd2\0\u1008\0\u103e\0\u017a\0\66\0\u1074"+
    "\0\u10aa\0\u10e0\0\u017a\0\66\0\u017a\0\u1116\0\u114c\0\u1182"+
    "\0\u11b8\0\u11ee\0\u017a\0\u017a\0\66\0\66\0\u017a\0\66"+
    "\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e"+
    "\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e"+
    "\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692\0\u16c8\0\u16fe"+
    "\0\u017a\0\66\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842"+
    "\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc\0\u19f2"+
    "\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u017a\0\66\0\u017a\0\66"+
    "\0\u1b00\0\u1b36\0\u1b6c\0\u017a\0\66\0\u1ba2\0\u1bd8\0\u1c0e"+
    "\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88\0\u1dbe"+
    "\0\u1df4\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e"+
    "\0\u017a\0\66";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\24\1\30\12\24\1\31\1\32\1\24\1\33\2\24"+
    "\1\34\1\35\1\36\1\2\1\37\1\2\1\40\1\41"+
    "\1\4\1\2\67\0\2\3\1\0\2\3\60\0\2\42"+
    "\1\43\3\42\1\43\56\42\1\43\7\0\1\44\3\0"+
    "\1\45\71\0\1\46\1\0\1\17\65\0\1\24\3\0"+
    "\20\24\1\47\6\24\33\0\1\24\3\0\27\24\33\0"+
    "\1\24\3\0\16\24\1\50\10\24\33\0\1\24\3\0"+
    "\4\24\1\51\11\24\1\52\10\24\33\0\1\24\3\0"+
    "\11\24\1\53\15\24\33\0\1\24\3\0\4\24\1\54"+
    "\13\24\1\55\6\24\33\0\1\24\3\0\22\24\1\56"+
    "\4\24\33\0\1\24\3\0\10\24\1\57\16\24\5\0"+
    "\1\60\25\0\1\24\3\0\1\61\26\24\61\0\1\62"+
    "\16\0\2\44\3\0\61\44\3\45\2\0\6\45\1\63"+
    "\52\45\5\0\1\64\13\0\1\64\35\0\1\64\27\0"+
    "\1\24\3\0\2\24\1\65\24\24\33\0\1\24\3\0"+
    "\14\24\1\66\12\24\33\0\1\24\3\0\5\24\1\67"+
    "\21\24\33\0\1\24\3\0\23\24\1\70\3\24\33\0"+
    "\1\24\3\0\4\24\1\71\22\24\33\0\1\24\3\0"+
    "\15\24\1\72\11\24\33\0\1\24\3\0\1\73\26\24"+
    "\33\0\1\24\3\0\20\24\1\74\6\24\33\0\1\24"+
    "\3\0\22\24\1\75\4\24\61\0\1\76\37\0\1\24"+
    "\3\0\13\24\1\77\13\24\57\0\1\100\20\0\3\45"+
    "\2\0\2\45\1\101\3\45\1\63\52\45\21\0\1\24"+
    "\3\0\7\24\1\102\17\24\33\0\1\24\3\0\17\24"+
    "\1\103\7\24\33\0\1\24\3\0\10\24\1\104\16\24"+
    "\5\0\1\105\25\0\1\24\3\0\1\24\1\106\25\24"+
    "\33\0\1\24\3\0\25\24\1\107\1\24\33\0\1\24"+
    "\3\0\4\24\1\110\22\24\33\0\1\24\3\0\5\24"+
    "\1\111\21\24\33\0\1\24\3\0\10\24\1\112\16\24"+
    "\5\0\1\113\25\0\1\24\3\0\23\24\1\114\3\24"+
    "\62\0\1\115\36\0\1\24\3\0\16\24\1\116\10\24"+
    "\47\0\1\113\23\0\1\113\25\0\1\24\3\0\10\24"+
    "\1\117\16\24\5\0\1\120\25\0\1\24\3\0\1\121"+
    "\26\24\33\0\1\24\3\0\15\24\1\122\11\24\54\0"+
    "\1\123\44\0\1\24\3\0\13\24\1\124\13\24\33\0"+
    "\1\24\3\0\20\24\1\125\6\24\33\0\1\24\3\0"+
    "\10\24\1\126\16\24\5\0\1\127\25\0\1\24\3\0"+
    "\15\24\1\130\11\24\54\0\1\131\44\0\1\24\3\0"+
    "\13\24\1\132\13\24\52\0\1\133\46\0\1\24\3\0"+
    "\20\24\1\134\6\24\33\0\1\24\3\0\24\24\1\135"+
    "\2\24\63\0\1\136\35\0\1\24\3\0\20\24\1\137"+
    "\6\24\33\0\1\24\3\0\10\24\1\140\16\24\5\0"+
    "\1\141\41\0\1\141\23\0\1\141\25\0\1\24\3\0"+
    "\4\24\1\142\22\24\33\0\1\24\3\0\1\143\26\24"+
    "\33\0\1\24\3\0\2\24\1\144\24\24\41\0\1\145"+
    "\57\0\1\24\3\0\6\24\1\146\20\24\45\0\1\147"+
    "\53\0\1\24\3\0\16\24\1\150\10\24\55\0\1\151"+
    "\43\0\1\24\3\0\4\24\1\152\22\24\33\0\1\24"+
    "\3\0\16\24\1\153\10\24\55\0\1\154\43\0\1\24"+
    "\3\0\4\24\1\155\22\24\33\0\1\24\3\0\20\24"+
    "\1\156\6\24\57\0\1\157\41\0\1\24\3\0\20\24"+
    "\1\160\6\24\33\0\1\24\3\0\1\161\26\24\37\0"+
    "\1\162\61\0\1\24\3\0\25\24\1\163\1\164\64\0"+
    "\1\165\1\166\33\0\1\24\3\0\21\24\1\167\5\24"+
    "\6\0\1\170\24\0\1\24\3\0\6\24\1\171\20\24"+
    "\45\0\1\172\53\0\1\24\3\0\20\24\1\173\6\24"+
    "\33\0\1\24\3\0\1\24\1\174\11\24\1\175\3\24"+
    "\1\176\7\24\40\0\1\177\11\0\1\200\3\0\1\201"+
    "\42\0\1\24\3\0\13\24\1\202\13\24\52\0\1\203"+
    "\46\0\1\24\3\0\4\24\1\204\22\24\33\0\1\24"+
    "\3\0\1\205\26\24\33\0\1\24\3\0\10\24\1\206"+
    "\16\24\5\0\1\207\25\0\1\24\3\0\10\24\1\210"+
    "\16\24\5\0\1\211\31\0\1\212\75\0\1\207\23\0"+
    "\1\207\41\0\1\211\23\0\1\211\25\0\1\24\3\0"+
    "\16\24\1\213\10\24\55\0\1\214\43\0\1\24\3\0"+
    "\17\24\1\215\7\24\33\0\1\24\3\0\20\24\1\216"+
    "\6\24\33\0\1\24\3\0\15\24\1\217\11\24\54\0"+
    "\1\220\44\0\1\24\3\0\4\24\1\221\22\24\43\0"+
    "\1\222\101\0\1\223\41\0\1\24\3\0\1\24\1\224"+
    "\25\24\40\0\1\225\60\0\1\24\3\0\16\24\1\226"+
    "\10\24\33\0\1\24\3\0\20\24\1\227\6\24\33\0"+
    "\1\24\3\0\4\24\1\230\22\24\43\0\1\231\101\0"+
    "\1\232\41\0\1\24\3\0\1\233\26\24\37\0\1\234"+
    "\61\0\1\24\3\0\20\24\1\235\6\24\33\0\1\24"+
    "\3\0\1\236\26\24\33\0\1\24\3\0\1\237\26\24"+
    "\37\0\1\240\65\0\1\241\61\0\1\24\3\0\13\24"+
    "\1\242\13\24\52\0\1\243\46\0\1\24\3\0\22\24"+
    "\1\244\4\24\33\0\1\24\3\0\21\24\1\245\5\24"+
    "\6\0\1\246\24\0\1\24\3\0\21\24\1\247\5\24"+
    "\6\0\1\250\51\0\1\250\13\0\1\250\51\0\1\246"+
    "\13\0\1\246\24\0\1\24\3\0\4\24\1\251\22\24"+
    "\43\0\1\252\55\0\1\24\3\0\4\24\1\253\22\24"+
    "\33\0\1\24\3\0\21\24\1\254\5\24\6\0\1\255"+
    "\51\0\1\255\13\0\1\255\24\0\1\24\3\0\4\24"+
    "\1\256\22\24\33\0\1\24\3\0\21\24\1\257\5\24"+
    "\6\0\1\260\24\0\1\24\3\0\22\24\1\261\4\24"+
    "\61\0\1\262\37\0\1\24\3\0\1\263\26\24\37\0"+
    "\1\264\61\0\1\24\3\0\3\24\1\265\23\24\42\0"+
    "\1\266\56\0\1\24\3\0\10\24\1\267\16\24\5\0"+
    "\1\270\41\0\1\270\23\0\1\270\25\0\1\24\3\0"+
    "\21\24\1\271\5\24\6\0\1\272\51\0\1\272\13\0"+
    "\1\272\24\0\1\24\3\0\22\24\1\273\4\24\61\0"+
    "\1\274\37\0\1\24\3\0\10\24\1\275\16\24\5\0"+
    "\1\276\41\0\1\276\23\0\1\276\25\0\1\24\3\0"+
    "\2\24\1\277\24\24\41\0\1\300\57\0\1\24\3\0"+
    "\16\24\1\301\10\24\55\0\1\302\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8100];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\11\11\1\1\3\11\11\1\4\11"+
    "\1\1\1\11\1\0\1\11\1\1\2\0\11\1\1\0"+
    "\1\1\2\0\12\1\1\0\1\1\1\0\4\1\1\0"+
    "\5\1\1\0\1\1\1\0\2\1\1\0\2\1\1\0"+
    "\3\1\1\0\1\1\1\0\1\1\1\0\2\1\1\0"+
    "\2\1\1\0\3\1\1\0\1\1\1\11\4\1\1\11"+
    "\2\1\1\0\2\1\1\0\2\1\2\11\1\1\1\11"+
    "\1\1\1\0\4\1\3\0\1\1\1\0\3\1\1\0"+
    "\1\1\2\0\1\1\1\0\3\1\1\0\1\1\1\11"+
    "\1\0\1\1\1\0\3\1\2\0\1\1\1\0\3\1"+
    "\2\0\1\1\1\0\2\1\1\11\1\1\1\11\1\1"+
    "\1\0\2\1\1\11\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
      yycolumn=1;
    yyline=1;
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Este es un error lexico: "+yytext()+
    ", en la linea: "+yyline+", en la columna: "+yycolumn);
            }
            // fall through
          case 41: break;
          case 2:
            { 
            }
            // fall through
          case 42: break;
          case 3:
            { return new Symbol(sym.hash,yyline,yycolumn,yytext());
            }
            // fall through
          case 43: break;
          case 4:
            { return new Symbol(sym.dolar,yyline,yycolumn,yytext());
            }
            // fall through
          case 44: break;
          case 5:
            { return new Symbol(sym.par_i,yyline,yycolumn,yytext());
            }
            // fall through
          case 45: break;
          case 6:
            { return new Symbol(sym.par_d,yyline,yycolumn,yytext());
            }
            // fall through
          case 46: break;
          case 7:
            { return new Symbol(sym.por,yyline,yycolumn,yytext());
            }
            // fall through
          case 47: break;
          case 8:
            { return new Symbol(sym.mas,yyline,yycolumn,yytext());
            }
            // fall through
          case 48: break;
          case 9:
            { return new Symbol(sym.coma,yyline,yycolumn,yytext());
            }
            // fall through
          case 49: break;
          case 10:
            { return new Symbol(sym.menos,yyline,yycolumn,yytext());
            }
            // fall through
          case 50: break;
          case 11:
            { return new Symbol(sym.punto,yyline,yycolumn,yytext());
            }
            // fall through
          case 51: break;
          case 12:
            { return new Symbol(sym.div,yyline,yycolumn,yytext());
            }
            // fall through
          case 52: break;
          case 13:
            { return new Symbol(sym.entero,yyline,yycolumn,yytext());
            }
            // fall through
          case 53: break;
          case 14:
            { return new Symbol(sym.d_punto,yyline,yycolumn,yytext());
            }
            // fall through
          case 54: break;
          case 15:
            { return new Symbol(sym.ptcoma,yyline,yycolumn,yytext());
            }
            // fall through
          case 55: break;
          case 16:
            { return new Symbol(sym.igual,yyline,yycolumn,yytext());
            }
            // fall through
          case 56: break;
          case 17:
            { return new Symbol(sym.name,yyline,yycolumn,yytext());
            }
            // fall through
          case 57: break;
          case 18:
            { return new Symbol(sym.cor_i,yyline,yycolumn,yytext());
            }
            // fall through
          case 58: break;
          case 19:
            { return new Symbol(sym.cor_d,yyline,yycolumn,yytext());
            }
            // fall through
          case 59: break;
          case 20:
            { return new Symbol(sym.llave_i,yyline,yycolumn,yytext());
            }
            // fall through
          case 60: break;
          case 21:
            { return new Symbol(sym.llave_d,yyline,yycolumn,yytext());
            }
            // fall through
          case 61: break;
          case 22:
            { return new Symbol(sym.coma_f,yyline,yycolumn,yytext());
            }
            // fall through
          case 62: break;
          case 23:
            { return new Symbol(sym.cadena,yyline,yycolumn,yytext());
            }
            // fall through
          case 63: break;
          case 24:
            { return new Symbol(sym.com,yyline,yycolumn,yytext());
            }
            // fall through
          case 64: break;
          case 25:
            { return new Symbol(sym.digitos,yyline,yycolumn,yytext());
            }
            // fall through
          case 65: break;
          case 26:
            { return new Symbol(sym.comm,yyline,yycolumn,yytext());
            }
            // fall through
          case 66: break;
          case 27:
            { return new Symbol(sym.pejex,yyline,yycolumn,yytext());
            }
            // fall through
          case 67: break;
          case 28:
            { return new Symbol(sym.tdouble,yyline,yycolumn,yytext());
            }
            // fall through
          case 68: break;
          case 29:
            { return new Symbol(sym.tstring,yyline,yycolumn,yytext());
            }
            // fall through
          case 69: break;
          case 30:
            { return new Symbol(sym.title,yyline,yycolumn,yytext());
            }
            // fall through
          case 70: break;
          case 31:
            { return new Symbol(sym.pfile,yyline,yycolumn,yytext());
            }
            // fall through
          case 71: break;
          case 32:
            { return new Symbol(sym.pcompare,yyline,yycolumn,yytext());
            }
            // fall through
          case 72: break;
          case 33:
            { return new Symbol(sym.title_x,yyline,yycolumn,yytext());
            }
            // fall through
          case 73: break;
          case 34:
            { return new Symbol(sym.title_y,yyline,yycolumn,yytext());
            }
            // fall through
          case 74: break;
          case 35:
            { return new Symbol(sym.pvalue,yyline,yycolumn,yytext());
            }
            // fall through
          case 75: break;
          case 36:
            { return new Symbol(sym.pgrafp,yyline,yycolumn,yytext());
            }
            // fall through
          case 76: break;
          case 37:
            { return new Symbol(sym.pgrafb,yyline,yycolumn,yytext());
            }
            // fall through
          case 77: break;
          case 38:
            { return new Symbol(sym.pgrafl,yyline,yycolumn,yytext());
            }
            // fall through
          case 78: break;
          case 39:
            { return new Symbol(sym.pdefinir,yyline,yycolumn,yytext());
            }
            // fall through
          case 79: break;
          case 40:
            { return new Symbol(sym.preporte,yyline,yycolumn,yytext());
            }
            // fall through
          case 80: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
