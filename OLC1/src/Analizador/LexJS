/*
 * Organización de Lenguajes y Compiladores 1 A
 * Aux. Emely García
 */

package Analizador;
import java_cup.runtime.Symbol;
import Errores.*;


%% 
%class Lexico
%public 
%line 
%char 
%cup 
%unicode

%init{ 
    yyline = 1; 
    yycolumn = 1; 
%init} 

COM = ("//")(.)*
COMM = ("/*")(.|\n)*"*/"
BLANCOS = [ \t\r\n]+
NOMBRE= [A-Za-z]([A-Za-z_]|[0-9])*
ENTERO = [0-9]+ 
DD=[0-9]+("."[  |0-9]+)?
CADENA = ['\"]((\\\")|[^\r\n\"])*['\"]


%%

"=" {return new Symbol(sym.igual,yyline,yycolumn,yytext());}
"+" {return new Symbol(sym.mas,yyline,yycolumn,yytext());}
"-" {return new Symbol(sym.menos,yyline,yycolumn,yytext());}
"*" {return new Symbol(sym.por,yyline,yycolumn,yytext());}
"/" {return new Symbol(sym.div,yyline,yycolumn,yytext());}
"%" {return new Symbol(sym.mod,yyline,yycolumn,yytext());}

"," {return new Symbol(sym.coma,yyline,yycolumn,yytext());}
":" {return new Symbol(sym.d_punto,yyline,yycolumn,yytext());}
"." {return new Symbol(sym.punto,yyline,yycolumn,yytext());}
";" {return new Symbol(sym.ptcoma,yyline,yycolumn,yytext());}
"<" {return new Symbol(sym.menor,yyline,yycolumn,yytext());}
">" {return new Symbol(sym.mayor,yyline,yycolumn,yytext());}
"!" {return new Symbol(sym.not,yyline,yycolumn,yytext());}
"&" {return new Symbol(sym.and,yyline,yycolumn,yytext());}
"|" {return new Symbol(sym.or,yyline,yycolumn,yytext());}
"(" {return new Symbol(sym.par_i,yyline,yycolumn,yytext());}
")" {return new Symbol(sym.par_d,yyline,yycolumn,yytext());}
"{" {return new Symbol(sym.llave_i,yyline,yycolumn,yytext());}
"}" {return new Symbol(sym.llave_d,yyline,yycolumn,yytext());}

"class" {return new Symbol(sym.pclass,yyline,yycolumn,yytext());}
"if" {return new Symbol(sym.pif,yyline,yycolumn,yytext());}
"else" {return new Symbol(sym.pelse,yyline,yycolumn,yytext());}
"while" {return new Symbol(sym.pwhile,yyline,yycolumn,yytext());}
"do" {return new Symbol(sym.pdo,yyline,yycolumn,yytext());}
"switch" {return new Symbol(sym.pswitch,yyline,yycolumn,yytext());}
"case" {return new Symbol(sym.pcase,yyline,yycolumn,yytext());}
"default" {return new Symbol(sym.pdef,yyline,yycolumn,yytext());}
"true" {return new Symbol(sym.ptrue,yyline,yycolumn,yytext());}
"false" {return new Symbol(sym.pfalse,yyline,yycolumn,yytext());}
"console" {return new Symbol(sym.cons,yyline,yycolumn,yytext());}
"log" {return new Symbol(sym.log,yyline,yycolumn,yytext());}
"break" {return new Symbol(sym.brk,yyline,yycolumn,yytext());}
"var" {return new Symbol(sym.var,yyline,yycolumn,yytext());}
"let" {return new Symbol(sym.let,yyline,yycolumn,yytext());}
"const" {return new Symbol(sym.pconst,yyline,yycolumn,yytext());}
"for" {return new Symbol(sym.pfor,yyline,yycolumn,yytext());}
"require" {return new Symbol(sym.req,yyline,yycolumn,yytext());}

{BLANCOS} {} 
{COM} {return new Symbol(sym.com,yyline,yycolumn,yytext());}
{COMM} {return new Symbol(sym.comm,yyline,yycolumn,yytext());}
{NOMBRE} {return new Symbol(sym.name,yyline,yycolumn,yytext());}  
{ENTERO} {return new Symbol(sym.entero,yyline,yycolumn,yytext());}  
{DD} {return new Symbol(sym.digitos,yyline,yycolumn,yytext());}  
{CADENA} {return new Symbol(sym.cadena,yyline,yycolumn,yytext());} 


. {
    System.out.println("Este es un error lexico: "+yytext()+
    ", en la linea: "+yyline+", en la columna: "+yycolumn);
AnalizadorLenguaje.errores.add(new MiError(yyline, yycolumn, TipoError.LEXICO, 
            "Se detectó un error léxico (caracter "+yytext()+")"));
}