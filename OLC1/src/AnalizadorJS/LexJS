package AnalizadorJS;
import java_cup.runtime.Symbol;

import Interfaz.AppForm;
import Tokens.*;


%% 
%class LexicoJS
%public 
%line 
%char 
%cup 
%unicode

%init{ 
    yyline = 1; 
    yycolumn = 1; 
%init} 

COM = ("//")(.)*
COMM = ("/*")(.|\n)*"*/"
BLANCOS = [ \t\r\n]+
NOMBRE= [A-Za-z]([A-Za-z_]|[0-9])*
ENTERO = [0-9]+ 
DD=[0-9]+("."[  |0-9]+)?
CADENA = ['\"]((\\\")|[^\r\n\"])*['\"]


%%

"=" {AppForm.tokens.add(new Token(yytext(),"tok_equal",yyline,yycolumn,AppForm.file_actual));
        return new Symbol(sym.igual,yyline,yycolumn,yytext());}
"+" {AppForm.tokens.add(new Token(yytext(),"tok_plus",yyline,yycolumn,AppForm.file_actual));
    return new Symbol(sym.mas,yyline,yycolumn,yytext());}
"-" {AppForm.tokens.add(new Token(yytext(),"tok_dif",yyline,yycolumn,AppForm.file_actual));
        return new Symbol(sym.menos,yyline,yycolumn,yytext());}
"*" {AppForm.tokens.add(new Token(yytext(),"tok_mult",yyline,yycolumn,AppForm.file_actual));
    return new Symbol(sym.por,yyline,yycolumn,yytext());}
"/" {AppForm.tokens.add(new Token(yytext(),"tok_slash",yyline,yycolumn,AppForm.file_actual));
    return new Symbol(sym.div,yyline,yycolumn,yytext());}
"%" {AppForm.tokens.add(new Token(yytext(),"tok_modulo",yyline,yycolumn,AppForm.file_actual));
    return new Symbol(sym.mod,yyline,yycolumn,yytext());}
"," {AppForm.tokens.add(new Token(yytext(),"tok_coma",yyline,yycolumn,AppForm.file_actual));
        return new Symbol(sym.coma,yyline,yycolumn,yytext());}
":" {AppForm.tokens.add(new Token(yytext(),"tok_dospunto",yyline,yycolumn,AppForm.file_actual));
    return new Symbol(sym.d_punto,yyline,yycolumn,yytext());}
"." {AppForm.tokens.add(new Token(yytext(),"tok_punto",yyline,yycolumn,AppForm.file_actual));
    return new Symbol(sym.punto,yyline,yycolumn,yytext());}
";" {AppForm.tokens.add(new Token(yytext(),"tok_puntocoma",yyline,yycolumn,AppForm.file_actual));
    return new Symbol(sym.ptcoma,yyline,yycolumn,yytext());}
"<" {AppForm.tokens.add(new Token(yytext(),"tok_menor",yyline,yycolumn,AppForm.file_actual));
        return new Symbol(sym.menor,yyline,yycolumn,yytext());}
">" {AppForm.tokens.add(new Token(yytext(),"tok_mayor",yyline,yycolumn,AppForm.file_actual));
    return new Symbol(sym.mayor,yyline,yycolumn,yytext());}
"!" {AppForm.tokens.add(new Token(yytext(),"tok_not",yyline,yycolumn,AppForm.file_actual));
    return new Symbol(sym.not,yyline,yycolumn,yytext());}
"&" {AppForm.tokens.add(new Token(yytext(),"tok_ampersand",yyline,yycolumn,AppForm.file_actual));
    return new Symbol(sym.and,yyline,yycolumn,yytext());}
"|" {AppForm.tokens.add(new Token(yytext(),"tok_or",yyline,yycolumn,AppForm.file_actual));
    return new Symbol(sym.or,yyline,yycolumn,yytext());}
"(" {AppForm.tokens.add(new Token(yytext(),"tok_pari",yyline,yycolumn,AppForm.file_actual));
    return new Symbol(sym.par_i,yyline,yycolumn,yytext());}
")" {AppForm.tokens.add(new Token(yytext(),"tok_pard",yyline,yycolumn,AppForm.file_actual));
    return new Symbol(sym.par_d,yyline,yycolumn,yytext());}
"{" {AppForm.tokens.add(new Token(yytext(),"tok_llavei",yyline,yycolumn,AppForm.file_actual));
    return new Symbol(sym.llave_i,yyline,yycolumn,yytext());}
"}" {AppForm.tokens.add(new Token(yytext(),"tok_llaved",yyline,yycolumn,AppForm.file_actual));
    return new Symbol(sym.llave_d,yyline,yycolumn,yytext());}

"class" {AppForm.tokens.add(new Token(yytext(),"tok_class",yyline,yycolumn,AppForm.file_actual));
    return new Symbol(sym.pclass,yyline,yycolumn,yytext());}
"if" {AppForm.tokens.add(new Token(yytext(),"tok_if",yyline,yycolumn,AppForm.file_actual));
    return new Symbol(sym.pif,yyline,yycolumn,yytext());}
"else" {AppForm.tokens.add(new Token(yytext(),"tok_else",yyline,yycolumn,AppForm.file_actual));
    return new Symbol(sym.pelse,yyline,yycolumn,yytext());}
"while" {AppForm.tokens.add(new Token(yytext(),"tok_while",yyline,yycolumn,AppForm.file_actual));
        return new Symbol(sym.pwhile,yyline,yycolumn,yytext());}
"do" {AppForm.tokens.add(new Token(yytext(),"tok_do",yyline,yycolumn,AppForm.file_actual));
        return new Symbol(sym.pdo,yyline,yycolumn,yytext());}
"switch" {AppForm.tokens.add(new Token(yytext(),"tok_switch",yyline,yycolumn,AppForm.file_actual));
            return new Symbol(sym.pswitch,yyline,yycolumn,yytext());}
"case" {AppForm.tokens.add(new Token(yytext(),"tok_case",yyline,yycolumn,AppForm.file_actual));
        return new Symbol(sym.pcase,yyline,yycolumn,yytext());}
"default" {AppForm.tokens.add(new Token(yytext(),"tok_default",yyline,yycolumn,AppForm.file_actual));
            return new Symbol(sym.pdef,yyline,yycolumn,yytext());}
"true" {AppForm.tokens.add(new Token(yytext(),"tok_true",yyline,yycolumn,AppForm.file_actual));
        return new Symbol(sym.ptrue,yyline,yycolumn,yytext());}
"false" {AppForm.tokens.add(new Token(yytext(),"tok_false",yyline,yycolumn,AppForm.file_actual));
        return new Symbol(sym.pfalse,yyline,yycolumn,yytext());}
"console" {AppForm.tokens.add(new Token(yytext(),"tok_console",yyline,yycolumn,AppForm.file_actual));
                return new Symbol(sym.cons,yyline,yycolumn,yytext());}
"log" {AppForm.tokens.add(new Token(yytext(),"tok_log",yyline,yycolumn,AppForm.file_actual));
        return new Symbol(sym.log,yyline,yycolumn,yytext());}
"break" {AppForm.tokens.add(new Token(yytext(),"tok_break",yyline,yycolumn,AppForm.file_actual));
        return new Symbol(sym.brk,yyline,yycolumn,yytext());}
"var" {AppForm.tokens.add(new Token(yytext(),"declaracionVar",yyline,yycolumn,AppForm.file_actual));
        return new Symbol(sym.var,yyline,yycolumn,yytext());}
"let" {AppForm.tokens.add(new Token(yytext(),"declaracionLet",yyline,yycolumn,AppForm.file_actual));
        return new Symbol(sym.let,yyline,yycolumn,yytext());}
"const" {AppForm.tokens.add(new Token(yytext(),"declaracion_const",yyline,yycolumn,AppForm.file_actual));
        return new Symbol(sym.pconst,yyline,yycolumn,yytext());}
"for" {AppForm.tokens.add(new Token(yytext(),"tok_for",yyline,yycolumn,AppForm.file_actual));
    return new Symbol(sym.pfor,yyline,yycolumn,yytext());}
"require" {AppForm.tokens.add(new Token(yytext(),"tok_import",yyline,yycolumn,AppForm.file_actual));
            return new Symbol(sym.req,yyline,yycolumn,yytext());}

{BLANCOS} {} 
{COM} {AppForm.tokens.add(new Token(yytext(),"CommOnelineJS",yyline,yycolumn,AppForm.file_actual));}
{COMM} {AppForm.tokens.add(new Token(yytext(),"CommMultilineJS",yyline,yycolumn,AppForm.file_actual));}
{NOMBRE} {AppForm.tokens.add(new Token(yytext(),"identificadorJS",yyline,yycolumn,AppForm.file_actual));
            return new Symbol(sym.name,yyline,yycolumn,yytext());}  
{ENTERO} {AppForm.tokens.add(new Token(yytext(),"tipo_enteroJS",yyline,yycolumn,AppForm.file_actual));
            return new Symbol(sym.entero,yyline,yycolumn,yytext());}  
{DD} {AppForm.tokens.add(new Token(yytext(),"tipo_digitoJS",yyline,yycolumn,AppForm.file_actual));
        return new Symbol(sym.digitos,yyline,yycolumn,yytext());}  
{CADENA} {AppForm.tokens.add(new Token(yytext(),"tipo_cadenaJS",yyline,yycolumn,AppForm.file_actual));
        return new Symbol(sym.cadena,yyline,yycolumn,yytext());} 


. {
    System.out.println("Este es un error lexico: "+yytext()+
    ", en la linea: "+yyline+", en la columna: "+yycolumn);
}