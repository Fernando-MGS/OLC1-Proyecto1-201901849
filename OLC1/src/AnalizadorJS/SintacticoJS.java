
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package AnalizadorJS;

import Contenedor.GLOBALES;
import Contenedor.FCA;
import Contenedor.Barras;
import Contenedor.Line;
import Contenedor.PIE;
import Interfaz.AppForm;
import java_cup.runtime.*;
import java.util.ArrayList;
import Errores.Error_G;
import ContenedorJS.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoJS extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoJS() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoJS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoJS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\002\003\000\002\052" +
    "\003\000\002\052\004\000\002\023\007\000\002\051\003" +
    "\000\002\051\004\000\002\024\003\000\002\024\003\000" +
    "\002\024\004\000\002\024\004\000\002\003\004\000\002" +
    "\003\004\000\002\032\003\000\002\032\004\000\002\004" +
    "\006\000\002\030\003\000\002\030\006\000\002\030\006" +
    "\000\002\030\006\000\002\006\005\000\002\006\005\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\004\000\002\016\005\000\002\016\005\000\002\031\003" +
    "\000\002\031\003\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\003\000\002\007\003\000\002" +
    "\005\003\000\002\005\003\000\002\010\003\000\002\010" +
    "\003\000\002\012\004\000\002\012\004\000\002\013\003" +
    "\000\002\013\003\000\002\013\004\000\002\013\004\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\004\000\002\014" +
    "\007\000\002\015\005\000\002\034\005\000\002\034\004" +
    "\000\002\034\010\000\002\034\006\000\002\034\006\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\020\005\000\002\020\004\000\002\021\003\000\002\021" +
    "\004\000\002\022\003\000\002\022\002\000\002\025\011" +
    "\000\002\026\003\000\002\026\002\000\002\027\003\000" +
    "\002\027\005\000\002\033\007\000\002\040\005\000\002" +
    "\037\006\000\002\037\006\000\002\037\010\000\002\035" +
    "\003\000\002\035\004\000\002\036\003\000\002\036\004" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\041\007\000\002\042\003\000\002\042" +
    "\002\000\002\042\005\000\002\043\013\000\002\044\010" +
    "\000\002\046\003\000\002\046\004\000\002\046\005\000" +
    "\002\045\006\000\002\047\005\000\002\050\014" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\004\026\005\001\002\000\006\002\000\026" +
    "\005\001\002\000\004\051\011\001\002\000\006\002\uffff" +
    "\026\uffff\001\002\000\004\002\010\001\002\000\004\002" +
    "\001\001\002\000\004\013\012\001\002\000\012\040\023" +
    "\041\017\042\021\051\014\001\002\000\014\014\312\040" +
    "\023\041\017\042\021\051\014\001\002\000\014\004\066" +
    "\006\025\012\027\016\070\054\067\001\002\000\062\014" +
    "\uffbc\016\033\020\037\021\uffbc\022\044\023\043\024\034" +
    "\025\uffbc\027\uffbc\030\uffbc\031\uffbc\033\uffbc\034\uffbc\040" +
    "\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\042" +
    "\047\035\050\041\051\032\054\040\001\002\000\014\014" +
    "\ufff9\040\ufff9\041\ufff9\042\ufff9\051\ufff9\001\002\000\004" +
    "\051\uffc3\001\002\000\014\014\ufffa\040\ufffa\041\ufffa\042" +
    "\ufffa\051\ufffa\001\002\000\004\051\uffc2\001\002\000\004" +
    "\051\024\001\002\000\004\051\uffc4\001\002\000\006\006" +
    "\025\012\027\001\002\000\004\012\030\001\002\000\062" +
    "\014\uffc1\016\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024" +
    "\uffc1\025\uffc1\027\uffc1\030\uffc1\031\uffc1\033\uffc1\034\uffc1" +
    "\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046" +
    "\uffc1\047\uffc1\050\uffc1\051\uffc1\054\uffc1\001\002\000\062" +
    "\014\uffbf\016\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024" +
    "\uffbf\025\uffbf\027\uffbf\030\uffbf\031\uffbf\033\uffbf\034\uffbf" +
    "\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046" +
    "\uffbf\047\uffbf\050\uffbf\051\uffbf\054\uffbf\001\002\000\062" +
    "\014\uffbe\016\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024" +
    "\uffbe\025\uffbe\027\uffbe\030\uffbe\031\uffbe\033\uffbe\034\uffbe" +
    "\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046" +
    "\uffbe\047\uffbe\050\uffbe\051\uffbe\054\uffbe\001\002\000\056" +
    "\014\uffc8\016\uffc8\021\uffc8\023\uffc8\024\uffc8\025\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\033\uffc8\034\uffc8\040\uffc8\041\uffc8" +
    "\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050" +
    "\uffc8\051\uffc8\054\uffc8\001\002\000\112\004\uffeb\005\uffeb" +
    "\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\014\uffeb\015" +
    "\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\023\uffeb\024\uffeb" +
    "\025\uffeb\027\uffeb\030\uffeb\031\uffeb\033\uffeb\034\uffeb\035" +
    "\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb" +
    "\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052" +
    "\uffeb\054\uffeb\001\002\000\022\016\033\023\043\024\034" +
    "\046\042\047\035\050\041\051\032\054\040\001\002\000" +
    "\112\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\012\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021" +
    "\uffe6\023\uffe6\024\uffe6\025\uffe6\027\uffe6\030\uffe6\031\uffe6" +
    "\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041" +
    "\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6" +
    "\050\uffe6\051\uffe6\052\uffe6\054\uffe6\001\002\000\112\004" +
    "\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8" +
    "\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\023" +
    "\uffe8\024\uffe8\025\uffe8\027\uffe8\030\uffe8\031\uffe8\033\uffe8" +
    "\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042" +
    "\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8" +
    "\051\uffe8\052\uffe8\054\uffe8\001\002\000\070\004\052\005" +
    "\054\006\047\011\051\014\uffbc\016\uffbc\020\037\021\uffbc" +
    "\023\uffbc\024\uffbc\025\uffbc\027\uffbc\030\uffbc\031\uffbc\033" +
    "\uffbc\034\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc" +
    "\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\054\053\001" +
    "\002\000\060\014\uffbd\016\uffbd\017\uffbd\021\uffbd\023\uffbd" +
    "\024\uffbd\025\uffbd\027\uffbd\030\uffbd\031\uffbd\033\uffbd\034" +
    "\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd" +
    "\046\uffbd\047\uffbd\050\uffbd\051\uffbd\054\uffbd\001\002\000" +
    "\022\016\033\023\043\024\034\046\042\047\035\050\041" +
    "\051\032\054\040\001\002\000\112\004\uffea\005\uffea\006" +
    "\uffea\007\uffea\010\uffea\011\uffea\012\uffea\014\uffea\015\uffea" +
    "\016\uffea\017\uffea\020\uffea\021\uffea\023\uffea\024\uffea\025" +
    "\uffea\027\uffea\030\uffea\031\uffea\033\uffea\034\uffea\035\uffea" +
    "\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea\044" +
    "\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea\052\uffea" +
    "\054\uffea\001\002\000\112\004\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\011\uffe9\012\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\020\uffe9\021\uffe9\023\uffe9\024\uffe9\025\uffe9\027" +
    "\uffe9\030\uffe9\031\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9" +
    "\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\045" +
    "\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\054\uffe9" +
    "\001\002\000\112\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010" +
    "\uffe7\011\uffe7\012\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7" +
    "\020\uffe7\021\uffe7\023\uffe7\024\uffe7\025\uffe7\027\uffe7\030" +
    "\uffe7\031\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7" +
    "\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046" +
    "\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\054\uffe7\001\002" +
    "\000\004\016\045\001\002\000\022\016\033\023\043\024" +
    "\034\046\042\047\035\050\041\051\032\054\040\001\002" +
    "\000\016\004\052\005\054\006\047\011\051\017\050\054" +
    "\053\001\002\000\024\006\060\016\uffce\023\uffce\024\uffce" +
    "\046\uffce\047\uffce\050\uffce\051\uffce\054\uffce\001\002\000" +
    "\060\014\uffbc\016\uffbc\020\037\021\uffbc\023\uffbc\024\uffbc" +
    "\025\uffbc\027\uffbc\030\uffbc\031\uffbc\033\uffbc\034\uffbc\040" +
    "\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc" +
    "\047\uffbc\050\uffbc\051\uffbc\054\uffbc\001\002\000\022\016" +
    "\uffcd\023\uffcd\024\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd" +
    "\054\uffcd\001\002\000\022\016\uffd1\023\uffd1\024\uffd1\046" +
    "\uffd1\047\uffd1\050\uffd1\051\uffd1\054\uffd1\001\002\000\022" +
    "\016\uffd0\023\uffd0\024\uffd0\046\uffd0\047\uffd0\050\uffd0\051" +
    "\uffd0\054\uffd0\001\002\000\022\016\uffcf\023\uffcf\024\uffcf" +
    "\046\uffcf\047\uffcf\050\uffcf\051\uffcf\054\uffcf\001\002\000" +
    "\022\016\033\023\043\024\034\046\042\047\035\050\041" +
    "\051\032\054\040\001\002\000\112\004\052\005\054\006" +
    "\047\007\uffe4\010\uffe4\011\051\012\uffe4\014\uffe4\015\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\021\uffe4\023\uffe4\024\uffe4\025" +
    "\uffe4\027\uffe4\030\uffe4\031\uffe4\033\uffe4\034\uffe4\035\uffe4" +
    "\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044" +
    "\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4" +
    "\054\053\001\002\000\056\014\uffc7\016\uffc7\021\uffc7\023" +
    "\uffc7\024\uffc7\025\uffc7\027\uffc7\030\uffc7\031\uffc7\033\uffc7" +
    "\034\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045" +
    "\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\054\uffc7\001\002" +
    "\000\022\016\uffcc\023\uffcc\024\uffcc\046\uffcc\047\uffcc\050" +
    "\uffcc\051\uffcc\054\uffcc\001\002\000\112\004\052\005\uffe5" +
    "\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\014\uffe5\015" +
    "\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\027\uffe5\030\uffe5\031\uffe5\033\uffe5\034\uffe5\035" +
    "\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5" +
    "\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052" +
    "\uffe5\054\uffe5\001\002\000\056\014\uffc9\016\uffc9\021\uffc9" +
    "\023\uffc9\024\uffc9\025\uffc9\027\uffc9\030\uffc9\031\uffc9\033" +
    "\uffc9\034\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9" +
    "\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\054\uffc9\001" +
    "\002\000\016\004\052\005\054\006\047\011\051\017\064" +
    "\054\053\001\002\000\112\004\uffe3\005\uffe3\006\uffe3\007" +
    "\uffe3\010\uffe3\011\uffe3\012\uffe3\014\uffe3\015\uffe3\016\uffe3" +
    "\017\uffe3\020\uffe3\021\uffe3\023\uffe3\024\uffe3\025\uffe3\027" +
    "\uffe3\030\uffe3\031\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3" +
    "\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045" +
    "\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\054\uffe3" +
    "\001\002\000\062\014\uffc0\016\uffc0\020\uffc0\021\uffc0\022" +
    "\uffc0\023\uffc0\024\uffc0\025\uffc0\027\uffc0\030\uffc0\031\uffc0" +
    "\033\uffc0\034\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044" +
    "\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\054\uffc0" +
    "\001\002\000\004\004\310\001\002\000\004\054\306\001" +
    "\002\000\006\017\uffb9\051\071\001\002\000\006\015\uffb8" +
    "\017\uffb8\001\002\000\004\017\076\001\002\000\006\015" +
    "\074\017\uffba\001\002\000\004\051\075\001\002\000\006" +
    "\015\uffb7\017\uffb7\001\002\000\004\013\077\001\002\000" +
    "\032\021\114\027\115\030\124\031\103\033\121\034\117" +
    "\040\023\041\017\042\021\043\111\044\120\051\125\001" +
    "\002\000\040\014\uffac\021\uffac\025\uffac\027\uffac\030\uffac" +
    "\031\uffac\033\uffac\034\uffac\040\uffac\041\uffac\042\uffac\043" +
    "\uffac\044\uffac\045\uffac\051\uffac\001\002\000\034\014\305" +
    "\021\114\027\115\030\124\031\103\033\121\034\117\040" +
    "\023\041\017\042\021\043\111\044\120\051\125\001\002" +
    "\000\004\013\266\001\002\000\004\053\275\001\002\000" +
    "\040\014\uffb1\021\uffb1\025\uffb1\027\uffb1\030\uffb1\031\uffb1" +
    "\033\uffb1\034\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044" +
    "\uffb1\045\uffb1\051\uffb1\001\002\000\040\014\uffaa\021\uffaa" +
    "\025\uffaa\027\uffaa\030\uffaa\031\uffaa\033\uffaa\034\uffaa\040" +
    "\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\051\uffaa" +
    "\001\002\000\040\014\uffa8\021\uffa8\025\uffa8\027\uffa8\030" +
    "\uffa8\031\uffa8\033\uffa8\034\uffa8\040\uffa8\041\uffa8\042\uffa8" +
    "\043\uffa8\044\uffa8\045\uffa8\051\uffa8\001\002\000\040\014" +
    "\uffad\021\uffad\025\uffad\027\uffad\030\uffad\031\uffad\033\uffad" +
    "\034\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045" +
    "\uffad\051\uffad\001\002\000\040\014\uffab\021\uffab\025\uffab" +
    "\027\uffab\030\uffab\031\uffab\033\uffab\034\uffab\040\uffab\041" +
    "\uffab\042\uffab\043\uffab\044\uffab\045\uffab\051\uffab\001\002" +
    "\000\004\016\271\001\002\000\004\013\266\001\002\000" +
    "\040\014\uffa9\021\uffa9\025\uffa9\027\uffa9\030\uffa9\031\uffa9" +
    "\033\uffa9\034\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044" +
    "\uffa9\045\uffa9\051\uffa9\001\002\000\004\016\240\001\002" +
    "\000\004\016\235\001\002\000\040\014\uffaf\021\uffaf\025" +
    "\uffaf\027\uffaf\030\uffaf\031\uffaf\033\uffaf\034\uffaf\040\023" +
    "\041\017\042\021\043\uffaf\044\uffaf\045\uffaf\051\233\001" +
    "\002\000\004\016\213\001\002\000\004\013\137\001\002" +
    "\000\042\014\uffbc\020\037\021\uffbc\025\uffbc\027\uffbc\030" +
    "\uffbc\031\uffbc\033\uffbc\034\uffbc\040\uffbc\041\uffbc\042\uffbc" +
    "\043\uffbc\044\uffbc\045\uffbc\051\uffbc\001\002\000\040\014" +
    "\ufffc\021\ufffc\025\ufffc\027\ufffc\030\ufffc\031\ufffc\033\ufffc" +
    "\034\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045" +
    "\ufffc\051\ufffc\001\002\000\040\014\uffa7\021\uffa7\025\uffa7" +
    "\027\uffa7\030\uffa7\031\uffa7\033\uffa7\034\uffa7\040\uffa7\041" +
    "\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\051\uffa7\001\002" +
    "\000\006\013\ufff4\027\115\001\002\000\014\004\066\006" +
    "\025\012\027\016\126\054\067\001\002\000\026\015\uffa4" +
    "\016\033\017\uffa4\023\043\024\034\046\042\047\035\050" +
    "\041\051\032\054\040\001\002\000\020\004\052\005\054" +
    "\006\047\011\051\015\uffa5\017\uffa5\054\053\001\002\000" +
    "\006\015\132\017\131\001\002\000\042\014\uffbc\020\037" +
    "\021\uffbc\025\uffbc\027\uffbc\030\uffbc\031\uffbc\033\uffbc\034" +
    "\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc" +
    "\051\uffbc\001\002\000\022\016\033\023\043\024\034\046" +
    "\042\047\035\050\041\051\032\054\040\001\002\000\020" +
    "\004\052\005\054\006\047\011\051\015\uffa3\017\uffa3\054" +
    "\053\001\002\000\040\014\uffa6\021\uffa6\025\uffa6\027\uffa6" +
    "\030\uffa6\031\uffa6\033\uffa6\034\uffa6\040\uffa6\041\uffa6\042" +
    "\uffa6\043\uffa6\044\uffa6\045\uffa6\051\uffa6\001\002\000\004" +
    "\013\ufff3\001\002\000\040\014\uffae\021\uffae\025\uffae\027" +
    "\uffae\030\uffae\031\uffae\033\uffae\034\uffae\040\uffae\041\uffae" +
    "\042\uffae\043\uffae\044\uffae\045\uffae\051\uffae\001\002\000" +
    "\032\021\114\027\115\030\124\031\103\033\121\034\117" +
    "\040\023\041\017\042\021\043\111\044\120\051\125\001" +
    "\002\000\034\014\142\021\114\027\115\030\124\031\103" +
    "\033\121\034\117\040\023\041\017\042\021\043\111\044" +
    "\120\051\125\001\002\000\040\014\uffb0\021\uffb0\025\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\033\uffb0\034\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\051\uffb0\001\002" +
    "\000\004\043\143\001\002\000\004\016\144\001\002\000" +
    "\024\016\033\023\154\024\146\037\147\046\042\047\035" +
    "\050\041\051\032\054\040\001\002\000\010\017\203\035" +
    "\204\036\205\001\002\000\032\004\uffe6\005\uffe6\006\uffe6" +
    "\007\uffe6\010\uffe6\011\uffe6\012\uffe6\017\uffdc\035\uffdc\036" +
    "\uffdc\037\uffe6\054\uffe6\001\002\000\012\016\177\023\174" +
    "\024\176\051\175\001\002\000\010\017\uffdb\035\uffdb\036" +
    "\uffdb\001\002\000\010\017\ufff1\035\ufff1\036\ufff1\001\002" +
    "\000\024\004\052\005\054\006\047\007\162\010\157\011" +
    "\051\012\163\037\155\054\053\001\002\000\010\017\uffda" +
    "\035\uffda\036\uffda\001\002\000\032\004\uffe7\005\uffe7\006" +
    "\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\017\uffdd\035\uffdd" +
    "\036\uffdd\037\uffe7\054\uffe7\001\002\000\004\012\173\001" +
    "\002\000\022\016\uffd9\023\uffd9\024\uffd9\046\uffd9\047\uffd9" +
    "\050\uffd9\051\uffd9\054\uffd9\001\002\000\024\012\172\016" +
    "\uffd4\023\uffd4\024\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4" +
    "\054\uffd4\001\002\000\022\016\033\023\043\024\034\046" +
    "\042\047\035\050\041\051\032\054\040\001\002\000\022" +
    "\016\uffd8\023\166\024\170\046\uffd8\047\uffd8\050\uffd8\051" +
    "\uffd8\054\uffd8\001\002\000\024\012\165\016\uffd5\023\uffd5" +
    "\024\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\054\uffd5\001" +
    "\002\000\004\012\164\001\002\000\022\016\uffd7\023\uffd7" +
    "\024\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\054\uffd7\001" +
    "\002\000\022\016\uffd2\023\uffd2\024\uffd2\046\uffd2\047\uffd2" +
    "\050\uffd2\051\uffd2\054\uffd2\001\002\000\012\017\uffe2\020" +
    "\uffe2\035\uffe2\036\uffe2\001\002\000\012\017\uffec\020\uffec" +
    "\035\uffec\036\uffec\001\002\000\012\017\uffe1\020\uffe1\035" +
    "\uffe1\036\uffe1\001\002\000\024\004\052\005\054\006\047" +
    "\011\051\017\uffed\020\uffed\035\uffed\036\uffed\054\053\001" +
    "\002\000\022\016\uffd3\023\uffd3\024\uffd3\046\uffd3\047\uffd3" +
    "\050\uffd3\051\uffd3\054\uffd3\001\002\000\022\016\uffd6\023" +
    "\uffd6\024\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\054\uffd6" +
    "\001\002\000\010\017\uffdf\035\uffdf\036\uffdf\001\002\000" +
    "\010\017\uffe0\035\uffe0\036\uffe0\001\002\000\010\017\uffde" +
    "\035\uffde\036\uffde\001\002\000\024\016\033\023\154\024" +
    "\146\037\200\046\042\047\035\050\041\051\032\054\040" +
    "\001\002\000\010\023\174\024\176\051\175\001\002\000" +
    "\004\017\202\001\002\000\010\017\ufff0\035\ufff0\036\ufff0" +
    "\001\002\000\042\014\uffbc\020\037\021\uffbc\025\uffbc\027" +
    "\uffbc\030\uffbc\031\uffbc\033\uffbc\034\uffbc\040\uffbc\041\uffbc" +
    "\042\uffbc\043\uffbc\044\uffbc\045\uffbc\051\uffbc\001\002\000" +
    "\004\035\210\001\002\000\004\036\206\001\002\000\024" +
    "\016\033\023\154\024\146\037\200\046\042\047\035\050" +
    "\041\051\032\054\040\001\002\000\010\017\uffef\035\uffef" +
    "\036\uffef\001\002\000\024\016\033\023\154\024\146\037" +
    "\200\046\042\047\035\050\041\051\032\054\040\001\002" +
    "\000\010\017\uffee\035\uffee\036\uffee\001\002\000\040\014" +
    "\uffa2\021\uffa2\025\uffa2\027\uffa2\030\uffa2\031\uffa2\033\uffa2" +
    "\034\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045" +
    "\uffa2\051\uffa2\001\002\000\004\051\214\001\002\000\004" +
    "\017\215\001\002\000\004\013\216\001\002\000\004\045" +
    "\220\001\002\000\040\014\uffa1\021\uffa1\025\226\027\uffa1" +
    "\030\uffa1\031\uffa1\033\uffa1\034\uffa1\040\uffa1\041\uffa1\042" +
    "\uffa1\043\uffa1\044\uffa1\045\220\051\uffa1\001\002\000\022" +
    "\016\033\023\043\024\034\046\042\047\035\050\041\051" +
    "\032\054\040\001\002\000\040\014\uffa0\021\uffa0\025\uffa0" +
    "\027\uffa0\030\uffa0\031\uffa0\033\uffa0\034\uffa0\040\uffa0\041" +
    "\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\051\uffa0\001\002" +
    "\000\016\004\052\005\054\006\047\011\051\052\223\054" +
    "\053\001\002\000\032\021\114\027\115\030\124\031\103" +
    "\033\121\034\117\040\023\041\017\042\021\043\111\044" +
    "\120\051\125\001\002\000\040\014\uff9d\021\114\025\uff9d" +
    "\027\115\030\124\031\103\033\121\034\117\040\023\041" +
    "\017\042\021\043\111\044\120\045\uff9d\051\125\001\002" +
    "\000\004\014\232\001\002\000\004\052\230\001\002\000" +
    "\040\014\uff9f\021\uff9f\025\uff9f\027\uff9f\030\uff9f\031\uff9f" +
    "\033\uff9f\034\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044" +
    "\uff9f\045\uff9f\051\uff9f\001\002\000\032\021\114\027\115" +
    "\030\124\031\103\033\121\034\117\040\023\041\017\042" +
    "\021\043\111\044\120\051\125\001\002\000\034\014\uff9c" +
    "\021\114\027\115\030\124\031\103\033\121\034\117\040" +
    "\023\041\017\042\021\043\111\044\120\051\125\001\002" +
    "\000\040\014\uff9e\021\uff9e\025\uff9e\027\uff9e\030\uff9e\031" +
    "\uff9e\033\uff9e\034\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e" +
    "\044\uff9e\045\uff9e\051\uff9e\001\002\000\012\004\066\006" +
    "\025\012\027\054\067\001\002\000\040\014\ufffb\021\ufffb" +
    "\025\ufffb\027\ufffb\030\ufffb\031\ufffb\033\ufffb\034\ufffb\040" +
    "\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\051\ufffb" +
    "\001\002\000\024\016\033\023\154\024\146\037\147\046" +
    "\042\047\035\050\041\051\032\054\040\001\002\000\010" +
    "\017\237\035\204\036\205\001\002\000\004\013\ufff2\001" +
    "\002\000\012\040\023\041\017\042\021\051\233\001\002" +
    "\000\022\016\033\023\043\024\034\046\042\047\035\050" +
    "\041\051\032\054\040\001\002\000\004\020\243\001\002" +
    "\000\004\051\244\001\002\000\010\004\253\012\252\054" +
    "\254\001\002\000\004\017\246\001\002\000\004\013\247" +
    "\001\002\000\032\021\114\027\115\030\124\031\103\033" +
    "\121\034\117\040\023\041\017\042\021\043\111\044\120" +
    "\051\125\001\002\000\034\014\251\021\114\027\115\030" +
    "\124\031\103\033\121\034\117\040\023\041\017\042\021" +
    "\043\111\044\120\051\125\001\002\000\040\014\uff9b\021" +
    "\uff9b\025\uff9b\027\uff9b\030\uff9b\031\uff9b\033\uff9b\034\uff9b" +
    "\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\051" +
    "\uff9b\001\002\000\022\016\033\023\043\024\034\046\042" +
    "\047\035\050\041\051\032\054\040\001\002\000\004\004" +
    "\257\001\002\000\004\054\255\001\002\000\006\017\uffbc" +
    "\020\037\001\002\000\004\017\uffb3\001\002\000\006\017" +
    "\uffbc\020\037\001\002\000\004\017\uffb4\001\002\000\014" +
    "\004\052\005\054\006\047\011\051\054\053\001\002\000" +
    "\022\016\033\023\043\024\034\046\042\047\035\050\041" +
    "\051\032\054\040\001\002\000\020\004\052\005\054\006" +
    "\047\011\051\017\uffbc\020\037\054\053\001\002\000\004" +
    "\017\uffb2\001\002\000\040\014\ufff6\021\ufff6\025\ufff6\027" +
    "\ufff6\030\ufff6\031\ufff6\033\ufff6\034\ufff6\040\ufff6\041\ufff6" +
    "\042\ufff6\043\ufff6\044\ufff6\045\ufff6\051\ufff6\001\002\000" +
    "\032\021\114\027\115\030\124\031\103\033\121\034\117" +
    "\040\023\041\017\042\021\043\111\044\120\051\125\001" +
    "\002\000\034\014\270\021\114\027\115\030\124\031\103" +
    "\033\121\034\117\040\023\041\017\042\021\043\111\044" +
    "\120\051\125\001\002\000\040\014\uffb5\021\uffb5\025\uffb5" +
    "\027\uffb5\030\uffb5\031\uffb5\033\uffb5\034\uffb5\040\uffb5\041" +
    "\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\051\uffb5\001\002" +
    "\000\024\016\033\023\154\024\146\037\147\046\042\047" +
    "\035\050\041\051\032\054\040\001\002\000\010\017\273" +
    "\035\204\036\205\001\002\000\004\013\266\001\002\000" +
    "\040\014\uffb6\021\uffb6\025\uffb6\027\uffb6\030\uffb6\031\uffb6" +
    "\033\uffb6\034\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044" +
    "\uffb6\045\uffb6\051\uffb6\001\002\000\004\032\276\001\002" +
    "\000\004\016\300\001\002\000\042\014\uffbc\020\037\021" +
    "\uffbc\025\uffbc\027\uffbc\030\uffbc\031\uffbc\033\uffbc\034\uffbc" +
    "\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\051" +
    "\uffbc\001\002\000\022\016\033\023\043\024\034\046\042" +
    "\047\035\050\041\051\032\054\040\001\002\000\016\004" +
    "\052\005\054\006\047\011\051\017\302\054\053\001\002" +
    "\000\042\014\uffca\020\uffca\021\uffca\025\uffca\027\uffca\030" +
    "\uffca\031\uffca\033\uffca\034\uffca\040\uffca\041\uffca\042\uffca" +
    "\043\uffca\044\uffca\045\uffca\051\uffca\001\002\000\040\014" +
    "\uffcb\021\uffcb\025\uffcb\027\uffcb\030\uffcb\031\uffcb\033\uffcb" +
    "\034\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045" +
    "\uffcb\051\uffcb\001\002\000\040\014\ufff5\021\ufff5\025\ufff5" +
    "\027\ufff5\030\ufff5\031\ufff5\033\ufff5\034\ufff5\040\ufff5\041" +
    "\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\051\ufff5\001\002" +
    "\000\014\014\uffbb\040\uffbb\041\uffbb\042\uffbb\051\uffbb\001" +
    "\002\000\060\014\uffbc\016\uffbc\020\037\021\uffbc\023\uffbc" +
    "\024\uffbc\025\uffbc\027\uffbc\030\uffbc\031\uffbc\033\uffbc\034" +
    "\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc" +
    "\046\uffbc\047\uffbc\050\uffbc\051\uffbc\054\uffbc\001\002\000" +
    "\056\014\uffc5\016\uffc5\021\uffc5\023\uffc5\024\uffc5\025\uffc5" +
    "\027\uffc5\030\uffc5\031\uffc5\033\uffc5\034\uffc5\040\uffc5\041" +
    "\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5" +
    "\050\uffc5\051\uffc5\054\uffc5\001\002\000\060\014\uffbc\016" +
    "\uffbc\020\037\021\uffbc\023\uffbc\024\uffbc\025\uffbc\027\uffbc" +
    "\030\uffbc\031\uffbc\033\uffbc\034\uffbc\040\uffbc\041\uffbc\042" +
    "\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc" +
    "\051\uffbc\054\uffbc\001\002\000\056\014\uffc6\016\uffc6\021" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\027\uffc6\030\uffc6\031\uffc6" +
    "\033\uffc6\034\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044" +
    "\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\054\uffc6" +
    "\001\002\000\006\002\ufffd\026\ufffd\001\002\000\014\014" +
    "\ufff7\040\ufff7\041\ufff7\042\ufff7\051\ufff7\001\002\000\014" +
    "\014\ufff8\040\ufff8\041\ufff8\042\ufff8\051\ufff8\001\002\000" +
    "\006\002\ufffe\026\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\010\002\006\023\005\052\003\001\001\000" +
    "\004\023\314\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\017\021\020\014\024\012\025\015\034\017\001\001" +
    "\000\012\017\021\020\014\025\312\034\313\001\001\000" +
    "\004\021\064\001\001\000\006\016\035\022\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\054\022\061\001\001\000\002" +
    "\001\001\000\004\016\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\045\001\001\000\004\011\054\001\001\000\002\001" +
    "\001\000\004\022\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\055\001\001\000\004\011\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\054\001\001\000\002\001" +
    "\001\000\004\011\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\071\027\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\107\004\111\014\106\017\021" +
    "\020\014\032\101\033\104\034\121\035\100\036\103\041" +
    "\077\043\112\044\105\050\122\051\115\001\001\000\002" +
    "\001\001\000\036\003\107\004\111\014\106\017\021\020" +
    "\014\032\101\033\104\034\121\036\140\041\077\043\112" +
    "\044\105\050\122\051\115\001\001\000\004\040\303\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\264\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\021\020" +
    "\014\034\233\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\134\001\001\000\004\021\064\001\001" +
    "\000\006\016\126\042\127\001\001\000\004\011\054\001" +
    "\001\000\002\001\001\000\004\022\133\001\001\000\004" +
    "\016\132\001\001\000\004\011\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\107" +
    "\004\111\014\106\017\021\020\014\032\101\033\104\034" +
    "\121\035\137\036\103\041\077\043\112\044\105\050\122" +
    "\051\115\001\001\000\036\003\107\004\111\014\106\017" +
    "\021\020\014\032\101\033\104\034\121\036\140\041\077" +
    "\043\112\044\105\050\122\051\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\005\150" +
    "\006\147\007\152\016\151\030\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\010\157\011\054\012\160\013" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\170\001\001\000\004\031\166\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\005\200\006\147\007\152\016\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\206\006\147\007\152\016\151\001\001\000\002\001\001" +
    "\000\012\005\210\006\147\007\152\016\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\045\220\046\216\001" +
    "\001\000\006\045\226\047\224\001\001\000\004\016\221" +
    "\001\001\000\002\001\001\000\004\011\054\001\001\000" +
    "\040\003\107\004\111\014\106\017\021\020\014\032\101" +
    "\033\104\034\121\035\223\036\103\041\077\043\112\044" +
    "\105\050\122\051\115\001\001\000\036\003\107\004\111" +
    "\014\106\017\021\020\014\032\101\033\104\034\121\036" +
    "\140\041\077\043\112\044\105\050\122\051\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\003\107\004\111\014\106\017\021\020\014\032\101" +
    "\033\104\034\121\035\230\036\103\041\077\043\112\044" +
    "\105\050\122\051\115\001\001\000\036\003\107\004\111" +
    "\014\106\017\021\020\014\032\101\033\104\034\121\036" +
    "\140\041\077\043\112\044\105\050\122\051\115\001\001" +
    "\000\002\001\001\000\004\021\064\001\001\000\002\001" +
    "\001\000\014\005\150\006\147\007\152\016\151\030\235" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\021\020\014\034\240\001\001\000\006\006\241\016\151" +
    "\001\001\000\002\001\001\000\004\037\244\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\107\004\111\014\106\017\021\020\014\032\101\033" +
    "\104\034\121\035\247\036\103\041\077\043\112\044\105" +
    "\050\122\051\115\001\001\000\036\003\107\004\111\014" +
    "\106\017\021\020\014\032\101\033\104\034\121\036\140" +
    "\041\077\043\112\044\105\050\122\051\115\001\001\000" +
    "\002\001\001\000\004\016\260\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\255\001\001\000\002\001" +
    "\001\000\004\022\257\001\001\000\002\001\001\000\004" +
    "\011\261\001\001\000\004\016\262\001\001\000\006\011" +
    "\054\022\263\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\003\107\004\111\014\106\017\021\020\014\032" +
    "\101\033\104\034\121\035\266\036\103\041\077\043\112" +
    "\044\105\050\122\051\115\001\001\000\036\003\107\004" +
    "\111\014\106\017\021\020\014\032\101\033\104\034\121" +
    "\036\140\041\077\043\112\044\105\050\122\051\115\001" +
    "\001\000\002\001\001\000\014\005\150\006\147\007\152" +
    "\016\151\030\271\001\001\000\002\001\001\000\004\040" +
    "\273\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\276\001\001\000\004\022\302\001\001\000\004\016" +
    "\300\001\001\000\004\011\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\306\001\001\000\002\001\001\000\004\022\310" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoJS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoJS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoJS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); AppForm.escribir("Error");
        String err="Error sintactico: no se esperaba el componente:" +s.value+".";
        AppForm.escribir(err);
        AppForm.errors.add(new Error_G(s.value.toString(),err,s.right,s.left,AppForm.file_actual));
        
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
        
        String err="Error sintactico: no se esperaba el componente:" +s.value+".";
        AppForm.escribir(err);
        AppForm.errors.add(new Error_G(s.value.toString(),err,s.right,s.left,AppForm.file_actual));
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoJS$actions {
  private final SintacticoJS parser;

  /** Constructor */
  CUP$SintacticoJS$actions(SintacticoJS parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoJS$do_action_part00000000(
    int                        CUP$SintacticoJS$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoJS$parser,
    java.util.Stack            CUP$SintacticoJS$stack,
    int                        CUP$SintacticoJS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoJS$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoJS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoJS$parser.done_parsing();
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INIT 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INIT ::= CLASS 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INIT",40, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INIT ::= INIT CLASS 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INIT",40, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CLASS ::= pclass name llave_i CLASS_I llave_d 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.peek()).value;
		int a=dleft-sleft+1;
        Clases clas = new Clases(n,AppForm.temp_info,a);
        AppForm.save_class.add(clas);
        AppForm.temp_info=new ArrayList<String>();
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("CLASS",17, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // D ::= DECLA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("D",39, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // D ::= D DECLA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("D",39, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CLASS_I ::= DECLA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("CLASS_I",18, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CLASS_I ::= FUNC 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("CLASS_I",18, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CLASS_I ::= CLASS_I DECLA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("CLASS_I",18, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CLASS_I ::= CLASS_I FUNC 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("CLASS_I",18, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IF ::= IF_F LLAVES 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("IF",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IF ::= ELSE LLAVES 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("IF",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ELSE ::= pelse 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("ELSE",24, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ELSE ::= pelse IF_F 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("ELSE",24, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IF_F ::= pif par_i COND_IF par_d 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("IF_F",2, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // COND_IF ::= EXPRESION_IF 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("COND_IF",22, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // COND_IF ::= not par_i EXPRESION_IF par_d 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("COND_IF",22, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // COND_IF ::= COND_IF or or EXPRESION_IF 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("COND_IF",22, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // COND_IF ::= COND_IF and and EXPRESION_IF 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("COND_IF",22, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRESION_R ::= SET OPR SET 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("EXPRESION_R",4, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESION_R ::= SET OPR_DF T_BOOL 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("EXPRESION_R",4, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SET ::= name 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.peek()).value;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("SET",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SET ::= digitos 
            {
              String RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("SET",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SET ::= entero 
            {
              String RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("SET",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SET ::= cadena 
            {
              String RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("SET",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SET ::= ptrue 
            {
              String RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("SET",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SET ::= pfalse 
            {
              String RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("SET",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SET ::= menos SET 
            {
              String RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("SET",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SET ::= SET OPR_SIM SET 
            {
              String RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("SET",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SET ::= par_i SET par_d 
            {
              String RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("SET",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // T_BOOL ::= ptrue 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("T_BOOL",23, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // T_BOOL ::= pfalse 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("T_BOOL",23, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION_L ::= not name 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("EXPRESION_L",5, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION_L ::= not ptrue 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("EXPRESION_L",5, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION_L ::= not pfalse 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("EXPRESION_L",5, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION_L ::= ptrue 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("EXPRESION_L",5, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION_L ::= pfalse 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("EXPRESION_L",5, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION_IF ::= EXPRESION_R 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("EXPRESION_IF",3, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION_IF ::= EXPRESION_L 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("EXPRESION_IF",3, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPR ::= OPR_MM 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("OPR",6, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPR ::= OPR_DF 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("OPR",6, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPR_DF ::= igual igual 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("OPR_DF",8, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPR_DF ::= not igual 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("OPR_DF",8, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPR_MM ::= mayor 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("OPR_MM",9, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPR_MM ::= menor 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("OPR_MM",9, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPR_MM ::= menor igual 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("OPR_MM",9, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPR_MM ::= mayor igual 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("OPR_MM",9, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPR_SIM ::= mas 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("OPR_SIM",7, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPR_SIM ::= menos 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("OPR_SIM",7, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPR_SIM ::= div 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("OPR_SIM",7, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPR_SIM ::= por 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("OPR_SIM",7, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPR_SIM ::= mod 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("OPR_SIM",7, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPR_SIM ::= por por 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("OPR_SIM",7, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONSOLE ::= cons punto log CONS END_L 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("CONSOLE",10, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONS ::= par_i SET par_d 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("CONS",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLA ::= D_TIPO SET END_L 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)).value;
		if(c!="123"){
        Variables var = new Variables(c);
        AppForm.save_vars.add(var);}
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("DECLA",26, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLA ::= D_TIPO END_L 
            {
              Object RESULT =null;
		int confleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)).left;
		int confright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)).right;
		String conf = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)).value;
		if(conf!="123"){
        Variables var = new Variables(conf);
        AppForm.save_vars.add(var);}
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("DECLA",26, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLA ::= D_TIPO req par_i SET par_d END_L 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("DECLA",26, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLA ::= name mas mas END_L 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("DECLA",26, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLA ::= name menos menos END_L 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("DECLA",26, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // V_TIPO ::= var 
            {
              String RESULT =null;
		RESULT="var";
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("V_TIPO",13, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // V_TIPO ::= let 
            {
              String RESULT =null;
		RESULT="let";
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("V_TIPO",13, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // V_TIPO ::= pconst 
            {
              String RESULT =null;
		RESULT="const";
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("V_TIPO",13, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // D_TIPO ::= V_TIPO name I_TIPO 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)).value;
		RESULT=n;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("D_TIPO",14, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // D_TIPO ::= name I_TIPO 
            {
              String RESULT =null;
		RESULT="123";
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("D_TIPO",14, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // I_TIPO ::= igual 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("I_TIPO",15, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // I_TIPO ::= por igual 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("I_TIPO",15, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // END_L ::= ptcoma 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("END_L",16, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // END_L ::= 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("END_L",16, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FUNC ::= name par_i PARAMS par_d llave_i INSTRUCCION llave_d 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.peek()).value;
		int size=endleft-nleft+1;
    AppForm.save_funciones.add(new Funciones(n,size,AppForm.contador_lineas));
    AppForm.contador_lineas=0;
    AppForm.temp_info.add(n);
    
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("FUNC",19, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PARAMS ::= PAR1 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("PARAMS",20, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PARAMS ::= 
            {
              Object RESULT =null;
		AppForm.contador_lineas=0;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("PARAMS",20, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PAR1 ::= name 
            {
              Object RESULT =null;
		AppForm.contador_lineas=1;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("PAR1",21, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PAR1 ::= PAR1 coma name 
            {
              Object RESULT =null;
		AppForm.contador_lineas++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("PAR1",21, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // WHILE ::= pwhile par_i COND_IF par_d LLAVES 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("WHILE",25, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LLAVES ::= llave_i INSTRUCCION llave_d 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("LLAVES",30, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // INCREMENT ::= name mas mas END_L 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INCREMENT",29, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // INCREMENT ::= name menos menos END_L 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INCREMENT",29, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // INCREMENT ::= name igual SET OPR_SIM SET END_L 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INCREMENT",29, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // INSTRUCCION ::= INS 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",27, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // INSTRUCCION ::= INSTRUCCION INS 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",27, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // INS ::= D 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INS",28, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // INS ::= brk END_L 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INS",28, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // INS ::= CONSOLE 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INS",28, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // INS ::= LLAMADA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INS",28, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INS ::= IF 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INS",28, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // INS ::= WHILE 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INS",28, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // INS ::= DO 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INS",28, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INS ::= SWITCH 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INS",28, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INS ::= FOR 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INS",28, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LLAMADA ::= name par_i PARAM_L par_d END_L 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",31, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PARAM_L ::= SET 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("PARAM_L",32, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PARAM_L ::= 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("PARAM_L",32, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PARAM_L ::= PARAM_L coma SET 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("PARAM_L",32, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DO ::= pdo llave_i INSTRUCCION llave_d pwhile par_i COND_IF par_d END_L 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("DO",33, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SWITCH ::= pswitch par_i name par_d llave_i CASE_S 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("SWITCH",34, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CASE_S ::= CASE 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("CASE_S",36, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CASE_S ::= CASE_S CASE 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("CASE_S",36, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CASE_S ::= CASE_S DEFAULT llave_d 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("CASE_S",36, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CASE ::= pcase SET d_punto INSTRUCCION 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("CASE",35, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DEFAULT ::= pdef d_punto INSTRUCCION 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("DEFAULT",37, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FOR ::= pfor par_i DECLA EXPRESION_R ptcoma INCREMENT par_d llave_i INSTRUCCION llave_d 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("FOR",38, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoJS$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoJS$do_action(
    int                        CUP$SintacticoJS$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoJS$parser,
    java.util.Stack            CUP$SintacticoJS$stack,
    int                        CUP$SintacticoJS$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoJS$do_action_part00000000(
                               CUP$SintacticoJS$act_num,
                               CUP$SintacticoJS$parser,
                               CUP$SintacticoJS$stack,
                               CUP$SintacticoJS$top);
    }
}

}
